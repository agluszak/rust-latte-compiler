#![allow(non_snake_case)]

// This file is generated by build.rs, do not edit it manually
use rust_latte_compiler::compile;
use rust_latte_compiler::input::Input;
use std::io::BufWriter;
use std::env;

macro_rules! good_test {{
    ($input:ident, $name:expr) => {{
        let input = $input;
        let reports = compile(&input.text, $name);

        let project_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
        let snapshots_dir = format!("{{}}/tests/snapshots", project_dir);

        let mut buf = BufWriter::new(Vec::new());

        for report in reports {{
            report.write(&input, &mut buf).unwrap();
        }}

        let bytes = buf.into_inner().unwrap();
        let output = String::from_utf8(bytes).unwrap();

        insta::with_settings!({{
            input_file => $name,
            snapshot_path => snapshots_dir,
            description => &input.text,
            omit_expression => true
            }}, {{
            insta::assert_snapshot!(output);
        }});
    }};
}}

macro_rules! bad_test {{
    ($input:ident, $name:expr) => {{
        let input = $input;
        let reports = compile(&input.text, $name);

        assert!(!reports.is_empty());

        let project_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
        let snapshots_dir = format!("{{}}/tests/snapshots", project_dir);

        let mut buf = BufWriter::new(Vec::new());

        for report in reports {{
            report.write(&input, &mut buf).unwrap();
        }}

        let bytes = buf.into_inner().unwrap();
        let output = String::from_utf8(bytes).unwrap();

        insta::with_settings!({{
            input_file => $name,
            snapshot_path => snapshots_dir,
            description => &input.text,
            omit_expression => true
            }}, {{
            insta::assert_snapshot!(output);
        }});
    }};
}}
