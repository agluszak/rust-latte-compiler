#![allow(non_snake_case)]

// This file is generated by build.rs, do not edit it manually
use rust_latte_compiler::compile;
use rust_latte_compiler::input::Input;
use std::io::{{BufWriter, Read, Write}};
use std::env;
use std::path::Path;
use std::fs::File;

macro_rules! good_test {{
    ($input:ident, $name:expr, $program_output:ident) => {{
        let input = $input;
        let ir = compile(&input.text, $name).unwrap();

        let project_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
        let snapshots_dir = format!("{{}}/tests/snapshots", project_dir);

        insta::with_settings!({{
            input_file => $name,
            snapshot_path => snapshots_dir,
            description => &input.text,
            omit_expression => true
            }}, {{
            insta::assert_snapshot!(ir);
        }});

        let expected_program_output = $program_output;
        let mut temp_file = tempfile::NamedTempFile::new().unwrap();
        temp_file.write_all(ir.as_bytes()).unwrap();

        let mut child = std::process::Command::new("lli")
            .arg(temp_file.path())
            .stdout(std::process::Stdio::piped())
            .stderr(std::process::Stdio::piped())
            .spawn()
            .unwrap();

        let mut output = String::new();
        child.stdout.as_mut().unwrap().read_to_string(&mut output).unwrap();
        let status = child.wait().unwrap();
        if !status.success() {{
            let mut stderr = String::new();
            child.stderr.as_mut().unwrap().read_to_string(&mut stderr).unwrap();
            panic!("lli failed with status {{:?}} and output {{}}", status, stderr);
        }}
        assert_eq!(output, expected_program_output);
    }};
}}

macro_rules! bad_test {{
    ($input:ident, $name:expr) => {{
        let input = $input;
        let reports = compile(&input.text, $name).unwrap_err();

        assert!(!reports.is_empty());

        let project_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
        let snapshots_dir = format!("{{}}/tests/snapshots", project_dir);

        let mut buf = BufWriter::new(Vec::new());

        for report in reports {{
            report.write(&input, &mut buf).unwrap();
        }}

        let bytes = buf.into_inner().unwrap();
        let output = String::from_utf8(bytes).unwrap();

        insta::with_settings!({{
            input_file => $name,
            snapshot_path => snapshots_dir,
            description => &input.text,
            omit_expression => true
            }}, {{
            insta::assert_snapshot!(output);
        }});
    }};
}}
