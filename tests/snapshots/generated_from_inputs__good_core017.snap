---
source: tests/generated_from_inputs.rs
description: "/* Test boolean operators */\n\nint main () {\n  int x = 4;\n  if (3 <= x && 4 != 2 && true) {\n    printBool(true);\n  } else {\n    printString(\"apa\");\n  }\n\n  printBool(true == true || dontCallMe(1));\n  printBool(4 < -5 && dontCallMe(2));\n\n  printBool(4 == x && true == !false && true);\n\n  printBool(implies(false,false));\n  printBool(implies(false,true));\n  printBool(implies(true,false));\n  printBool(implies(true,true));\n  return 0 ;\n\n}\n\nboolean dontCallMe(int x) {\n  printInt(x);\n  return true;\n}\n\nvoid printBool(boolean b) {\n  if (b) {\n    printString(\"true\");\n  } else {\n    printString(\"false\");\n }\n return;\n}\n\nboolean implies(boolean x, boolean y) {\n  return !x || x == y;\n}\n"
---
; ModuleID = 'core017'
source_filename = "core017"

%string = type { ptr, i32, i32 }

@dnl = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@snl = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1

declare i32 @printf(ptr, ...)

define void @printInt(i32 %0) {
entry:
  %call = call i32 (ptr, ...) @printf(ptr @dnl, i32 %0)
  ret void
}

define void @printString(ptr %0) {
entry:
  %buf_ptr = getelementptr inbounds %string, ptr %0, i32 0, i32 0
  %len_ptr = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %buf = load ptr, ptr %buf_ptr, align 8
  %len = load i32, ptr %len_ptr, align 4
  %call = call i32 (ptr, ...) @printf(ptr @snl, i32 %len, ptr %buf)
  ret void
}

define i1 @dontCallMe(i32 %0) {
b0:
  call void @printInt(i32 %0)
  ret i1 true
}

define i1 @implies(i1 %0, i1 %1) {
b0:
  %v2 = xor i1 %0, true
  %v3 = icmp eq i1 %0, %1
  %v4 = or i1 %v2, %v3
  ret i1 %v4
}

define i32 @main() {
b0:
  call void @printBool(i1 true)
  %dontCallMe = call i1 @dontCallMe(i32 1)
  call void @printBool(i1 true)
  %dontCallMe1 = call i1 @dontCallMe(i32 2)
  call void @printBool(i1 false)
  call void @printBool(i1 true)
  %implies = call i1 @implies(i1 false, i1 false)
  call void @printBool(i1 %implies)
  %implies2 = call i1 @implies(i1 false, i1 true)
  call void @printBool(i1 %implies2)
  %implies3 = call i1 @implies(i1 true, i1 false)
  call void @printBool(i1 %implies3)
  %implies4 = call i1 @implies(i1 true, i1 true)
  call void @printBool(i1 %implies4)
  ret i32 0
}

define void @printBool(i1 %0) {
b0:
  br i1 %0, label %b1, label %b2

b1:                                               ; preds = %b0
  %buf = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32), i32 4))
  store [4 x i8] c"true", ptr %buf, align 1
  %string = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %buf_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 0
  %len_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 1
  %len_ptr1 = getelementptr inbounds %string, ptr %string, i32 0, i32 2
  store ptr %buf, ptr %buf_ptr, align 8
  store i32 4, ptr %len_ptr, align 4
  store i32 4, ptr %len_ptr1, align 4
  call void @printString(ptr %string)
  br label %b3

b2:                                               ; preds = %b0
  %buf2 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32), i32 5))
  store [5 x i8] c"false", ptr %buf2, align 1
  %string3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %buf_ptr4 = getelementptr inbounds %string, ptr %string3, i32 0, i32 0
  %len_ptr5 = getelementptr inbounds %string, ptr %string3, i32 0, i32 1
  %len_ptr6 = getelementptr inbounds %string, ptr %string3, i32 0, i32 2
  store ptr %buf2, ptr %buf_ptr4, align 8
  store i32 5, ptr %len_ptr5, align 4
  store i32 5, ptr %len_ptr6, align 4
  call void @printString(ptr %string3)
  br label %b3

b3:                                               ; preds = %b2, %b1
  ret void
}

declare noalias ptr @malloc(i32)

