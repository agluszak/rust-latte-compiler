---
source: tests/generated_from_inputs.rs
description: "/**\n * Iterative fibonacci.\n *\n * @param n a non-negative index in Fibonacci sequence.\n * @return value of `n`'th Fibonacci number\n *\n * @author cbart@students.mimuw.edu.pl (Cezary Bartoszuk)\n */\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int fib_a = 0;\n    int fib_b = 1;\n    int tmp;\n    int i = 2;\n    while (i <= n) {\n        tmp = fib_b + fib_a;\n        fib_a = fib_b;\n        fib_b = tmp;\n        i++;\n    }\n    return fib_b;\n}\n\n\nint main() {\n    int i = readInt();\n    if (i >= 0) {\n        printInt(fibonacci(i));\n        return 0;\n    } else {\n        printString(\"Expected a non-negative integer, but got:\");\n        printInt(i);\n        return 1;\n    }\n}\n"
---
; ModuleID = 'fibonacci'
source_filename = "fibonacci"

%string = type { i8*, i32 }

declare void @printInt(i32)

declare void @printString(%string*)

declare i32 @readInt()

declare %string* @readString()

declare void @error()

declare %string* @newString(i8*, i32)

declare %string* @stringConcat(%string*, %string*)

declare i32 @stringEqual(%string*, %string*)

define i32 @fibonacci(i32 %0) {
b0:
  %v2 = icmp sle i32 %0, 1
  br i1 %v2, label %b1, label %b2

b1:                                               ; preds = %b0
  ret i32 %0

b2:                                               ; preds = %b0
  br label %b3

b3:                                               ; preds = %b5, %b2
  %v8 = phi i32 [ 2, %b2 ], [ %v15, %b5 ]
  %v11 = phi i32 [ 1, %b2 ], [ %v13, %b5 ]
  %v12 = phi i32 [ 0, %b2 ], [ %v11, %b5 ]
  %v10 = icmp sle i32 %v8, %0
  br i1 %v10, label %b5, label %b4

b4:                                               ; preds = %b3
  ret i32 %v11

b5:                                               ; preds = %b3
  %v13 = add i32 %v11, %v12
  %v15 = add i32 %v8, 1
  br label %b3
}

define i32 @main() {
b0:
  %readInt = call i32 @readInt()
  %v2 = icmp sge i32 %readInt, 0
  br i1 %v2, label %b1, label %b2

b1:                                               ; preds = %b0
  %fibonacci = call i32 @fibonacci(i32 %readInt)
  call void @printInt(i32 %fibonacci)
  ret i32 0

b2:                                               ; preds = %b0
  %str_ptr = alloca [41 x i8], align 1
  store [41 x i8] c"Expected a non-negative integer, but got:", [41 x i8]* %str_ptr, align 1
  %str_ptr1 = bitcast [41 x i8]* %str_ptr to i8*
  %new_string = call %string* @newString(i8* %str_ptr1, i32 41)
  call void @printString(%string* %new_string)
  call void @printInt(i32 %readInt)
  ret i32 1
}

