---
source: tests/generated_from_inputs.rs
description: "/**\n * Iterative fibonacci.\n *\n * @param n a non-negative index in Fibonacci sequence.\n * @return value of `n`'th Fibonacci number\n *\n * @author cbart@students.mimuw.edu.pl (Cezary Bartoszuk)\n */\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int fib_a = 0;\n    int fib_b = 1;\n    int tmp;\n    int i = 2;\n    while (i <= n) {\n        tmp = fib_b + fib_a;\n        fib_a = fib_b;\n        fib_b = tmp;\n        i++;\n    }\n    return fib_b;\n}\n\n\nint main() {\n    int i = readInt();\n    if (i >= 0) {\n        printInt(fibonacci(i));\n        return 0;\n    } else {\n        printString(\"Expected a non-negative integer, but got:\");\n        printInt(i);\n        return 1;\n    }\n}\n"
---
; ModuleID = 'fibonacci'
source_filename = "fibonacci"

%string = type { ptr, i32, i32 }

@dnl = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@snl = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@d = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@msn = private unnamed_addr constant [6 x i8] c"%ms%n\00", align 1

declare i32 @printf(ptr, ...)

declare i32 @scanf(ptr, ...)

define void @printInt(i32 %0) {
entry:
  %call = call i32 (ptr, ...) @printf(ptr @dnl, i32 %0)
  ret void
}

define void @printString(ptr %0) {
entry:
  %buf_ptr = getelementptr inbounds %string, ptr %0, i32 0, i32 0
  %len_ptr = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %buf = load ptr, ptr %buf_ptr, align 8
  %len = load i32, ptr %len_ptr, align 4
  %call = call i32 (ptr, ...) @printf(ptr @snl, i32 %len, ptr %buf)
  ret void
}

define i32 @readInt() {
entry:
  %buf = alloca i32, align 4
  %call = call i32 (ptr, ...) @scanf(ptr @d, ptr %buf)
  %buf1 = load i32, ptr %buf, align 4
  ret i32 %buf1
}

define ptr @readString() {
entry:
  %buf = alloca ptr, align 8
  %len = alloca i32, align 4
  %call = call i32 (ptr, ...) @scanf(ptr @msn, ptr %buf, ptr %len)
  %buf1 = load ptr, ptr %buf, align 8
  %len2 = load i32, ptr %len, align 4
  %string = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %buf_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 0
  %len_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 1
  %len_ptr3 = getelementptr inbounds %string, ptr %string, i32 0, i32 2
  store ptr %buf1, ptr %buf_ptr, align 8
  store i32 %len2, ptr %len_ptr, align 4
  store i32 %len2, ptr %len_ptr3, align 4
  ret ptr %string
}

declare noalias ptr @malloc(i32)

define i32 @fibonacci(i32 %0) {
b0:
  %v2 = icmp sle i32 %0, 1
  br i1 %v2, label %b1, label %b2

b1:                                               ; preds = %b0
  ret i32 %0

b2:                                               ; preds = %b0
  br label %b3

b3:                                               ; preds = %b5, %b2
  %v8 = phi i32 [ 2, %b2 ], [ %v15, %b5 ]
  %v11 = phi i32 [ 1, %b2 ], [ %v13, %b5 ]
  %v12 = phi i32 [ 0, %b2 ], [ %v11, %b5 ]
  %v10 = icmp sle i32 %v8, %0
  br i1 %v10, label %b5, label %b4

b4:                                               ; preds = %b3
  ret i32 %v11

b5:                                               ; preds = %b3
  %v13 = add i32 %v11, %v12
  %v15 = add i32 %v8, 1
  br label %b3
}

define i32 @main() {
b0:
  %readInt = call i32 @readInt()
  %v2 = icmp sge i32 %readInt, 0
  br i1 %v2, label %b1, label %b2

b1:                                               ; preds = %b0
  %fibonacci = call i32 @fibonacci(i32 %readInt)
  call void @printInt(i32 %fibonacci)
  ret i32 0

b2:                                               ; preds = %b0
  %buf = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32), i32 41))
  store [41 x i8] c"Expected a non-negative integer, but got:", ptr %buf, align 1
  %string = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %buf_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 0
  %len_ptr = getelementptr inbounds %string, ptr %string, i32 0, i32 1
  %len_ptr1 = getelementptr inbounds %string, ptr %string, i32 0, i32 2
  store ptr %buf, ptr %buf_ptr, align 8
  store i32 41, ptr %len_ptr, align 4
  store i32 41, ptr %len_ptr1, align 4
  call void @printString(ptr %string)
  call void @printInt(i32 %readInt)
  ret i32 1
}

