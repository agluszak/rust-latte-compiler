---
source: tests/generated_from_inputs.rs
description: "boolean blah(int x, int y) {\n    boolean z = x == y;\n    if (!z) {\n        printInt(x);\n        printInt(y);\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    (blah(1, 1) && blah(1, 2)) || blah(5, 5);\n    return 0;\n}"
---
; ModuleID = 'bool_calls'
source_filename = "bool_calls"

%string = type { i8*, i32 }

declare void @printInt(i32)

declare void @printString(%string*)

declare i32 @readInt()

declare %string* @readString()

declare void @error()

declare %string* @newString(i8*, i32)

declare %string* @stringConcat(%string*, %string*)

declare i32 @stringEqual(%string*, %string*)

define i1 @blah(i32 %0, i32 %1) {
b0:
  %v2 = icmp eq i32 %0, %1
  %v3 = xor i1 %v2, true
  br i1 %v3, label %b1, label %b2

b1:                                               ; preds = %b0
  call void @printInt(i32 %0)
  call void @printInt(i32 %1)
  ret i1 false

b2:                                               ; preds = %b0
  ret i1 true
}

define i32 @main() {
b0:
  %blah = call i1 @blah(i32 1, i32 1)
  br i1 %blah, label %b2, label %b3

b1:                                               ; preds = %b2
  br label %b4

b2:                                               ; preds = %b0
  %blah1 = call i1 @blah(i32 1, i32 2)
  br i1 %blah1, label %b1, label %b3

b3:                                               ; preds = %b2, %b0
  br label %b4

b4:                                               ; preds = %b3, %b1
  %v8 = phi i1 [ true, %b1 ], [ false, %b3 ]
  br i1 %v8, label %b5, label %b6

b5:                                               ; preds = %b6, %b4
  br label %b8

b6:                                               ; preds = %b4
  %blah2 = call i1 @blah(i32 5, i32 5)
  br i1 %blah2, label %b5, label %b7

b7:                                               ; preds = %b6
  br label %b8

b8:                                               ; preds = %b7, %b5
  %v14 = phi i1 [ true, %b5 ], [ false, %b7 ]
  ret i32 0
}

